"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[8446],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(a),c=l,h=d["".concat(s,".").concat(c)]||d[c]||u[c]||r;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),l=a(34334);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(83117),l=a(67294),r=a(34334),i=a(72389),o=a(67392),s=a(7094),p=a(12466);const m="tabList__CuJ",u="tabItem_LNqP";function d(e){var t;const{lazy:a,block:i,defaultValue:d,values:c,groupId:h,className:k}=e,b=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=c??b.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,o.l)(N,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===d?d:d??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==g&&!N.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${N.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,s.U)(),[T,_]=(0,l.useState)(g),I=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=h){const e=v[h];null!=e&&e!==T&&N.some((t=>t.value===e))&&_(e)}const C=e=>{const t=e.currentTarget,a=I.indexOf(t),n=N[a].value;n!==T&&(x(t),_(n),null!=h&&y(h,String(n)))},A=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;a=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;a=I[t]??I[I.length-1];break}}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",m)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},k)},N.map((e=>{let{value:t,label:a,attributes:i}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>I.push(e),onKeyDown:A,onFocus:C,onClick:C},i,{className:(0,r.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,l.cloneElement)(b.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function c(e){const t=(0,i.Z)();return l.createElement(d,(0,n.Z)({key:String(t)},e))}},17266:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var n=a(83117),l=(a(67294),a(3905)),r=a(65488),i=a(85162);const o={sidebar_position:1,title:"Formula"},s=void 0,p={unversionedId:"mapping/advanced/calculated/formula",id:"mapping/advanced/calculated/formula",title:"Formula",description:"Simple formula properties are properties declared with @org.babyfish.jimmer.sql.Formula. There are two usages:",source:"@site/docs/mapping/advanced/calculated/formula.mdx",sourceDirName:"mapping/advanced/calculated",slug:"/mapping/advanced/calculated/formula",permalink:"/jimmer-doc/docs/mapping/advanced/calculated/formula",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/mapping/advanced/calculated/formula.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Formula"},sidebar:"tutorialSidebar",previous:{title:"Calculated Properties",permalink:"/jimmer-doc/docs/mapping/advanced/calculated/"},next:{title:"Complex Calculation",permalink:"/jimmer-doc/docs/mapping/advanced/calculated/transient"}},m={},u=[{value:"1. Java/Kotlin-based Calculation",id:"1-javakotlin-based-calculation",level:2},{value:"Depending on simple properties",id:"depending-on-simple-properties",level:3},{value:"Depending on embedded object",id:"depending-on-embedded-object",level:3},{value:"Depending on association properties",id:"depending-on-association-properties",level:3},{value:"2. SQL-based Calculation",id:"2-sql-based-calculation",level:2},{value:"Comparison",id:"comparison",level:2}],d={toc:u};function c(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Simple formula properties are properties declared with ",(0,l.kt)("inlineCode",{parentName:"p"},"@org.babyfish.jimmer.sql.Formula"),". There are two usages:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Formula properties based on Java/Kotlin calculation"),(0,l.kt)("li",{parentName:"ul"},"Formula properties based on SQL calculation")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Simple formula properties are designed for simple and fast calculations. For complex calculations, use ",(0,l.kt)("a",{parentName:"p",href:"./transient"},"Complex Formula Properties")," instead.")),(0,l.kt)("p",null,"In ",(0,l.kt)("a",{parentName:"p",href:"/jimmer-doc/docs/quick-view/get-started/define-entity"},"Define Entity"),", we defined two fields for ",(0,l.kt)("inlineCode",{parentName:"p"},"Author"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName"),"."),(0,l.kt)("p",null,"Next, let's add a new property ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"Author"),": "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fullName = firstName + ' ' + lastName\n")),(0,l.kt)("p",null,"Then we use two different ways, Java/Kotlin-based calculation and SQL-based calculation, to implement ",(0,l.kt)("inlineCode",{parentName:"p"},"Author.fullName"),"."),(0,l.kt)("h2",{id:"1-javakotlin-based-calculation"},"1. Java/Kotlin-based Calculation"),(0,l.kt)("h3",{id:"depending-on-simple-properties"},"Depending on simple properties"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Author.java"',title:'"Author.java"'},'package com.example.model;\n\nimport org.babyfish.jimmer.sql.*;\n\n@Entity\npublic interface Author {\n\n    @Formula(dependencies = {"firstName", "lastName"})\n    default String fullName() {\n        return firstName() + \' \' + lastName(); \n    }\n\n    ...Omit other properties...\n}\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Author.kt"',title:'"Author.kt"'},'package com.example.model\n\nimport org.babyfish.jimmer.sql.*\n\n@Entity\ninterface Author {\n\n    @Formula(dependencies = ["firstName", "lastName"])\n    val fullName: String\n        get() = "$firstName $lastName"\n\n    ...Omit other properties...\n}\n')))),(0,l.kt)("p",null,"It is easy to see that Java/Kotlin-based simple formula properties have the following characteristics:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The property is not abstract (requires ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," keyword in Java) and directly provides calculation logic implementation.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"@Formula"),"'s ",(0,l.kt)("inlineCode",{parentName:"p"},"dependencies")," is specified, indicating that this property depends on ",(0,l.kt)("inlineCode",{parentName:"p"},"Author.firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Author.lastName"),"."),(0,l.kt)("p",{parentName:"li"},"  That is, the dynamic entity must ensure the presence of both ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName")," properties to calculate ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName"),".\n"))),(0,l.kt)("p",null,"The usage is:"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"Author author = authorRepository.findNullable(\n    1L,\n    Fetchers.AUTHOR_FETCHER\n        // Query id (implicit + forced) and fullName  \n        // highlight-next-line\n        .fullName()\n);\nSystem.out.println(author);\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val author = authorRepository.findNullable(\n    1L,\n    newFetcher(Author::class).by {\n        // Query id (implicit + forced) and fullName\n        // highlight-next-line\n        fullName()\n    }\n);\nprintln(author)\n")))),(0,l.kt)("p",null,"The executed SQL is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    /* highlight-start */  \n    tb_1_.FIRST_NAME,\n    tb_1_.LAST_NAME\n    /* highlight-end */\nfrom AUTHOR as tb_1_\nwhere tb_1_.ID = ?  \n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," is a formula property without corresponding field in the database, but depends on ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName"),".\nSo this SQL queries ",(0,l.kt)("inlineCode",{parentName:"p"},"FIRST_NAME")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"LAST_NAME")," to make its dependent properties present.  "),(0,l.kt)("p",null,"Next, let's see what is printed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"id":1,"fullName":"Eve Procello"}\n')),(0,l.kt)("p",null,"We can see that after Jackson serialization (the ",(0,l.kt)("inlineCode",{parentName:"p"},"toString")," method of entity objects is a shortcut for serialization), there is only ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," but no ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName"),"."),(0,l.kt)("p",null,"This is because the object fetcher causes ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName")," to be indirectly fetched due to fetching ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName"),", but they are not directly fetched."),(0,l.kt)("p",null,"In this case, although the dynamic object has ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName"),", they are marked as invisible to Jackson and will not appear in the Jackson serialization result. "),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If the object fetcher directly fetches ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName"),", they will definitely appear in the serialization result. Readers can try it themselves, no need to repeat here.")),(0,l.kt)("h3",{id:"depending-on-embedded-object"},"Depending on embedded object"),(0,l.kt)("p",null,"Suppose there is an Embeddable type"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="NameInfo.java"',title:'"NameInfo.java"'},"@Embeddable\npublic interface NameInfo {\n    String firstName();\n    String lastName();\n}\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="NameInfo.kt"',title:'"NameInfo.kt"'},"@Embeddable\ninterface NameInfo {\n    val firstName: String\n    val lastName: String\n}\n")))),(0,l.kt)("p",null,"If an entity uses this Embeddable type, then the entity properties can depend on its internal properties, for example"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Author.java"',title:'"Author.java"'},'@Entity\npublic interface Author {\n\n    NameInfo nameInfo();\n\n    // highlight-next-line\n    @Formula(dependencies = {"nameInfo.firstName", "nameInfo.lastName"})\n    // or it can be written as: @Formula(dependencies = "nameInfo")\n    default String fullName() {\n        return nameInfo().firstName() + \' \' + nameInfo().lastName();\n    }\n\n    ...other properties omitted...\n}\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Author.kt"',title:'"Author.kt"'},'@Entity\ninterface Author {\n\n    val nameInfo: NameInfo\n\n    // highlight-next-line\n    @Formula(dependencies = ["nameInfo.firstName", "nameInfo.lastName"])\n    // or it can be written as: @Formula(dependencies = ["nameInfo"])\n    ...other properties omitted...\n    val fullName: String\n        get() = "${nameInfo.firstName} ${nameInfo.lastName}"\n}\n')))),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The usage and execution effect are completely the same as above, no need to repeat.")),(0,l.kt)("h3",{id:"depending-on-association-properties"},"Depending on association properties"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    @ManyToMany\n    List<Author> authors();\n\n    // highlight-next-line\n    @Formula(dependencies = "authors")\n    default int authorCount() {\n        return authors().size();\n    }\n\n    // highlight-next-line\n    @Formula(dependencies = {"authors.firstName", "authors.lastName"})\n    default List<String> authorNames() {\n        return authors()\n            .stream()\n            .map(author -> author.firstName() + \' \' + author.lastName())\n            .collect(Collectors.toList());\n    }\n\n    ...other properties omitted...\n}\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\npublic interface Book {\n\n    @ManyToMany\n    val authors: List<Author>\n\n    // highlight-next-line\n    @Formula(dependencies = "authors")\n    val authorCount: Int\n        get() = authors.size\n\n    // highlight-next-line\n    @Formula(dependencies = ["authors.firstName", "authors.lastName"])\n    val authorNames: List<String>\n        get() = authors.map { "${it.firstName} ${it.lastName}" }\n\n    ...other properties omitted...\n}\n')))),(0,l.kt)("p",null,"Execute the following code"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'BookTable table = BookTable.$;\n\nList<Book> books = sqlClient\n    .createQuery(table)\n    .where(table.name().eq("Learning GraphQL"))\n    .orderBy(table.edition().desc())\n    .select(\n        table.fetch(\n            BookFetcher.$\n                .name()\n                .edition()\n                // highlight-next-line\n                .authorCount()\n                // highlight-next-line\n                .authorNames()\n        )\n    )\n    .execute();\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.name eq "Learning GraphQL")\n        orderBy(table.edition().desc())\n        select(\n            table.fetchBy {\n                name()\n                edition()\n                // highlight-next-line\n                authorCount()\n                // highlight-next-line\n                authorNames()\n            }\n        )\n    }\n    .execute()\n')))),(0,l.kt)("p",null,"Execute, generating two SQL statements"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\nfrom BOOK tb_1_\nwhere\n    tb_1_.NAME = ? /* Learning GraphQL */\norder by\n    tb_1_.EDITION desc\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_2_.BOOK_ID,\n    tb_1_.ID,\n    tb_1_.FIRST_NAME,\n    tb_1_.LAST_NAME\nfrom AUTHOR tb_1_\ninner join BOOK_AUTHOR_MAPPING tb_2_\n    on tb_1_.ID = tb_2_.AUTHOR_ID\nwhere\n    tb_2_.BOOK_ID in (\n        ? /* 3 */, ? /* 2 */, ? /* 1 */\n    )\norder by\n    tb_1_.FIRST_NAME asc,\n    tb_1_.LAST_NAME asc\n")))),(0,l.kt)("p",null,"The obtained data is as follows"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id":3,\n        "name":"Learning GraphQL",\n        "edition":3,\n        // highlight-next-line\n        "authorCount":2,\n        // highlight-next-line\n        "authorNames":["Alex Banks","Eve Procello"]\n    }, \n    {\n        "id":2,\n        "name":"Learning GraphQL",\n        "edition":2,\n        // highlight-next-line\n        "authorCount":2,\n        // highlight-next-line\n        "authorNames":["Alex Banks","Eve Procello"]\n    }, \n    {\n        "id":1,\n        "name":"Learning GraphQL",\n        "edition":1,\n        // highlight-next-line\n        "authorCount":2,\n        // highlight-next-line\n        "authorNames":["Alex Banks","Eve Procello"]\n    }\n]\n')),(0,l.kt)("h2",{id:"2-sql-based-calculation"},"2. SQL-based Calculation"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Author.java"',title:'"Author.java"'},"package com.example.model;\n\nimport org.babyfish.jimmer.sql.*;\n\n@Entity\npublic interface Author {\n\n    @Formula(sql = \"concat(%alias.FIRST_NAME, ' ', %alias.LAST_NAME)\")\n    String fullName();\n\n    ...Omit other properties...\n} \n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Author.kt"',title:'"Author.kt"'},"package com.example.model\n\nimport org.babyfish.jimmer.sql.*\n\n@Entity\ninterface Author {\n\n    @Formula(sql = \"concat(%alias.FIRST_NAME, ' ', %alias.LAST_NAME)\")\n    val fullName: String\n\n    ...Omit other properties...\n}\n")))),(0,l.kt)("p",null,"It is easy to see that SQL-based simple formula properties have the following characteristics:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The property is abstract.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"@Formula"),"'s ",(0,l.kt)("inlineCode",{parentName:"p"},"sql")," is specified as an SQL expression with a special token ",(0,l.kt)("inlineCode",{parentName:"p"},"%alias")),(0,l.kt)("p",{parentName:"li"},"  Users cannot know the alias of the current table in the final SQL in advance, so Jimmer stipulates here that ",(0,l.kt)("inlineCode",{parentName:"p"},"%alias")," represents the actual table column name.\n"))),(0,l.kt)("p",null,"The usage is:"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"Author author = authorRepository.findNullable(  \n    1L,\n    Fetchers.AUTHOR_FETCHER\n        // Query id (implicit + forced) and fullName\n        // highlight-next-line\n        .fullName()\n);\nSystem.out.println(author);\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val author = authorRepository.findNullable(\n    1L,\n    newFetcher(Author::class).by {\n        // Query id (implicit + forced) and fullName\n        // highlight-next-line\n        fullName()\n    }\n);\nprintln(author)\n")))),(0,l.kt)("p",null,"The generated SQL is:  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    /* Here, `%alias` in @Formula.sql is replaced with `tb_1_` */ \n    /* highlight-next-line */\n    concat(tb_1_.FIRST_NAME, ' ', tb_1_.LAST_NAME)\nfrom AUTHOR as tb_1_\nwhere tb_1_.ID = ?\n")),(0,l.kt)("p",null,"The final printed result is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"id":1,"fullName":"Eve Procello"}\n')),(0,l.kt)("h2",{id:"comparison"},"Comparison"),(0,l.kt)("p",null,"Compared with Java/Kotlin-based simple formula, SQL-based simple formula has one disadvantage and one advantage:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Disadvantage: If the object fetcher fetches ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," at the same time, it will cause the final SQL to query three columns: "),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("inlineCode",{parentName:"p"},"tb_1_.FIRST_NAME"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"tb_1_.LAST_NAME")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"concat(tb_1_.FIRST_NAME, ' ', tb_1_.LAST_NAME)"),"."),(0,l.kt)("p",{parentName:"li"},"  Obviously, the returned data contains redundancy and is wasteful.\n")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Advantage: Java/Kotlin-based formula properties can only be used as fields to be fetched by object fetchers, and cannot be used by SQL DSL."),(0,l.kt)("p",{parentName:"li"},"  SQL-based formula properties will be generated into the strongly typed SQL DSL API by the code generator, available for SQL DSL, such as:"),(0,l.kt)("p",{parentName:"li"},"  Java's ",(0,l.kt)("inlineCode",{parentName:"p"},'where(table.fullName().eq("Eve Procello"))')," or Kotlin's ",(0,l.kt)("inlineCode",{parentName:"p"},'where(table.fullName eq "Eve Procello")')),(0,l.kt)("p",{parentName:"li"},"  :::tip",(0,l.kt)("br",{parentName:"p"}),"\n","Among all formula properties, only SQL-based simple formula properties can be used by SQL DSL."),(0,l.kt)("p",{parentName:"li"},"  It is recommended to use databases that support function indexes and use them in combination with function indexes.\n:::\n"))),(0,l.kt)("p",null,"Therefore, it is recommended to carefully consider whether @Formula formula properties should be based on Java/Kotlin calculation or SQL calculation."))}c.isMDXComponent=!0}}]);