"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[2226],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),u=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=u(e.components);return a.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=u(t),c=r,g=d["".concat(p,".").concat(c)]||d[c]||s[c]||l;return t?a.createElement(g,i(i({ref:n},m),{},{components:t})):a.createElement(g,i({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(67294),r=t(34334);const l="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>c});var a=t(83117),r=t(67294),l=t(34334),i=t(72389),o=t(67392),p=t(7094),u=t(12466);const m="tabList__CuJ",s="tabItem_LNqP";function d(e){var n;const{lazy:t,block:i,defaultValue:d,values:c,groupId:g,className:h}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=c??k.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),b=(0,o.l)(y,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===d?d:d??(null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)??k[0].props.value;if(null!==v&&!y.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:N}=(0,p.U)(),[E,T]=(0,r.useState)(v),w=[],{blockElementScrollPositionUntilNextRender:I}=(0,u.o5)();if(null!=g){const e=f[g];null!=e&&e!==E&&y.some((n=>n.value===e))&&T(e)}const x=e=>{const n=e.currentTarget,t=w.indexOf(n),a=y[t].value;a!==E&&(I(n),T(a),null!=g&&N(g,String(a)))},A=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;t=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;t=w[n]??w[w.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",m)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":i},h)},y.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:E===n?0:-1,"aria-selected":E===n,key:n,ref:e=>w.push(e),onKeyDown:A,onFocus:x,onClick:x},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":E===n})}),t??n)}))),t?(0,r.cloneElement)(k.filter((e=>e.props.value===E))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==E})))))}function c(e){const n=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(n)},e))}},73587:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>s});var a=t(83117),r=(t(67294),t(3905)),l=t(65488),i=t(85162);const o={sidebar_position:6,title:"Enum Mapping"},p=void 0,u={unversionedId:"mapping/advanced/enum",id:"mapping/advanced/enum",title:"Enum Mapping",description:"Jimmer handles enums in two ways:",source:"@site/docs/mapping/advanced/enum.mdx",sourceDirName:"mapping/advanced",slug:"/mapping/advanced/enum",permalink:"/jimmer-doc/docs/mapping/advanced/enum",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/mapping/advanced/enum.mdx",tags:[],version:"current",lastUpdatedAt:1732248232,formattedLastUpdatedAt:"Nov 22, 2024",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Enum Mapping"},sidebar:"tutorialSidebar",previous:{title:"Complex Calculation",permalink:"/jimmer-doc/docs/mapping/advanced/calculated/transient"},next:{title:"JSON Mapping",permalink:"/jimmer-doc/docs/mapping/advanced/json"}},m={},s=[{value:"Map to String",id:"map-to-string",level:2},{value:"Map to Integer",id:"map-to-integer",level:2},{value:"Do Not Explicitly Use @EnumType",id:"do-not-explicitly-use-enumtype",level:2},{value:"Work with TypeScript Client and Jackson",id:"work-with-typescript-client-and-jackson",level:2}],d={toc:s};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Jimmer handles enums in two ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Map to string: A choice with better understandability and traceability, also the default option.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Map to integer: A choice with better performance-first.  "))),(0,r.kt)("p",null,"Jimmer provides two annotations for enums:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.EnumType"),": Decorate enum types, optional"),(0,r.kt)("p",{parentName:"li"},"Specify mapping method, map to string or ordinal position to integer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.EnumItem"),": Decorate enum items, optional"),(0,r.kt)("p",{parentName:"li"},"Override the mapped string value or integer value for some enum item"))),(0,r.kt)("h2",{id:"map-to-string"},"Map to String"),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Gender.java"',title:'"Gender.java"'},"// highlight-next-line\n@EnumType(EnumType.Strategy.NAME)\npublic enum Gender {\n    MALE,\n    FEMALE\n}\n"))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Gender.kt"',title:'"Gender.kt"'},"// highlight-next-line\n@EnumType(EnumType.Strategy.NAME)  \nenum class Gender {\n    MALE,\n    FEMALE\n}\n")))),(0,r.kt)("p",null,"Here, the parameter of ",(0,r.kt)("inlineCode",{parentName:"p"},"@EnumType"),' is specified as "NAME", indicating mapping to string. By default, the mapped string values of the two enum items are the same as their names, i.e. "MALE" and "FEMALE". '),(0,r.kt)("p",null,"If you expect the mapped strings to be different from the enum item names, you can decorate the enum items with ",(0,r.kt)("inlineCode",{parentName:"p"},"@EnumItem"),"."),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Gender.java"',title:'"Gender.java"'},'@EnumType(EnumType.Strategy.NAME)\npublic enum Gender {\n\n    // highlight-next-line\n    @EnumItem(name = "M")\n    MALE,\n\n    // highlight-next-line\n    @EnumItem(name = "F") \n    FEMALE\n}\n'))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Gender.kt"',title:'"Gender.kt"'},'@EnumType(EnumType.Strategy.NAME)\nenum class Gender {\n\n    // highlight-next-line\n    @EnumItem(name = "M")\n    MALE,\n\n    // highlight-next-line\n    @EnumItem(name = "F")\n    FEMALE\n}\n')))),(0,r.kt)("h2",{id:"map-to-integer"},"Map to Integer"),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Gender.java"',title:'"Gender.java"'},"// highlight-next-line\n@EnumType(EnumType.Strategy.ORDINAL)\npublic enum Gender {\n    MALE,\n    FEMALE\n}\n"))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Gender.kt"',title:'"Gender.kt"'},"// highlight-next-line\n@EnumType(EnumType.Strategy.ORDINAL)\nenum class Gender {\n    MALE,\n    FEMALE\n} \n")))),(0,r.kt)("p",null,"Here, the parameter of ",(0,r.kt)("inlineCode",{parentName:"p"},"@EnumType"),' is specified as "ORDINAL", indicating mapping to integer. By default, the mapped integer values of the two enum items are the same as their ',(0,r.kt)("inlineCode",{parentName:"p"},"ordinal"),", i.e. 0 and 1."),(0,r.kt)("p",null,"If you expect the mapped integers to be different from the enum items' ",(0,r.kt)("inlineCode",{parentName:"p"},"ordinal"),", you can decorate the enum items with ",(0,r.kt)("inlineCode",{parentName:"p"},"@EnumItem"),"."),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Gender.java"',title:'"Gender.java"'},"@EnumType(EnumType.Strategy.ORDINAL)  \npublic enum Gender {\n\n    // highlight-next-line\n    @EnumItem(ordinal = 100)\n    MALE,\n\n    // highlight-next-line\n    @EnumItem(ordinal = 200)\n    FEMALE\n}\n"))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Gender.kt"',title:'"Gender.kt"'},"@EnumType(EnumType.Strategy.ORDINAL)\nenum class Gender {\n\n    // highlight-next-line\n    @EnumItem(ordinal = 100) \n    MALE,\n\n    // highlight-next-line\n    @EnumItem(ordinal = 200)\n    FEMALE\n}\n")))),(0,r.kt)("h2",{id:"do-not-explicitly-use-enumtype"},"Do Not Explicitly Use @EnumType"),(0,r.kt)("p",null,"You can also avoid specifying the @EnumType annotation for enum types, that is, not explicitly indicate whether an enum type should be mapped to string or integer."),(0,r.kt)("p",null,"In this case, Jimmer will refer to the default global configuration. "),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},'The default value of this global configuration is "NAME". If you need "ORDINAL", please override the global configuration.')),(0,r.kt)("p",null,"Next, we show how to override the global configuration:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When using SpringBoot"),(0,r.kt)("p",{parentName:"li"},"Add configuration item ",(0,r.kt)("inlineCode",{parentName:"p"},"jimmer.default-enum-strategy")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"application.yml")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"application.properties"),' and set its value to "ORDINAL"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When not using SpringBoot"),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"JSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    // highlight-next-line\n    .setDefaultEnumStrategy(EnumType.Strategy.ORDINAL)\n    ...Omit other configurations...\n    .build();\n"))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val sqlClient = newKSqlClient {\n    // highlight-next-line\n    setDefaultEnumStrategy(EnumType.Strategy.ORDINAL)\n    ...Omit other configurations... \n}\n")))))),(0,r.kt)("h2",{id:"work-with-typescript-client-and-jackson"},"Work with TypeScript Client and Jackson"),(0,r.kt)("p",null,"The serialization of a type to JSON and its storage in the database are two independent matters. The content described above focuses on how Jimmer handles enum mapping in the database, which is unrelated to JSON."),(0,r.kt)("p",null,"By default, Jackson converts enums to its name, so when generating the TypeScript Client, Jimmer maps the enum according to its name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<Tabs groupId="language">\n<TabItem value="java" label="Java">\n\n```java\nenum Gender {\n    MAN,\n    WOMAN\n}\n```\n\n</TabItem>\n<TabItem value="kotlin" label="Kotlin">\n\n```kotlin\nenum class Gender {\n    MAN,\n    WOMAN\n}\n```\n\n</TabItem>\n</Tabs>\n')),(0,r.kt)("p",null,"The generated TypeScript code is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"```TypeScript\nexport const GenderEnum_CONSTANTS = [\n    'MAN',\n    'WOMAN'\n] as const;\nexport type GenderEnum = typeof GenderEnum_CONSTANTS[number];\n\n//usage\nexport type PersonDto = {\n    gender: GenderEnum;\n}\n```\n")),(0,r.kt)("p",null,"If you want to customize the JSON serialization, you need to use the @JsonValue annotation from Jackson."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<Tabs groupId="language">\n<TabItem value="java" label="Java">\n\n```java\nenum Gender {\n    MAN,\n    WOMAN;\n\n    @JsonValue\n    public String getValue() {\n        return name().toLowerCase();\n    }\n}\n```\n\n</TabItem>\n<TabItem value="kotlin" label="Kotlin">\n\n```kotlin\nenum class Gender {\n    MAN,\n    WOMAN;\n\n    @JsonValue\n    fun getValue(): String {\n        return name().toLowerCase();\n    }\n}\n```\n\n</TabItem>\n</Tabs>\n')),(0,r.kt)("p",null,"When detects the presence of annotations like @JsonValue, Jimmer not knowing how the enum will be converted during JSON serialization, so jimmer will translates the enum type to a string. The generated TypeScript code in this case is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"```TypeScript\nexport type PersonDto = {\n    gender: string;\n}\n```\n")))}c.isMDXComponent=!0}}]);