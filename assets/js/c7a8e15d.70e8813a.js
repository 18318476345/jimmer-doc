"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[5136],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(34334);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(83117),r=n(67294),i=n(34334),o=n(72389),l=n(67392),s=n(7094),c=n(12466);const u="tabList__CuJ",p="tabItem_LNqP";function m(e){var t;const{lazy:n,block:o,defaultValue:m,values:d,groupId:f,className:g}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,l.l)(h,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const C=null===m?m:m??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==C&&!h.some((e=>e.value===C)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${C}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,s.U)(),[S,T]=(0,r.useState)(C),N=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=f){const e=v[f];null!=e&&e!==S&&h.some((t=>t.value===e))&&T(e)}const j=e=>{const t=e.currentTarget,n=N.indexOf(t),a=h[n].value;a!==S&&(x(t),T(a),null!=f&&y(f,String(a)))},q=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},g)},h.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:e=>N.push(e),onKeyDown:q,onFocus:j,onClick:j},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":S===t})}),n??t)}))),n?(0,r.cloneElement)(b.filter((e=>e.props.value===S))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==S})))))}function d(e){const t=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},83201:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(83117),r=(n(67294),n(3905)),i=n(65488),o=n(85162);const l={sidebar_position:3,title:"Multiple DataSources"},s=void 0,c={unversionedId:"configuration/multi-datasources",id:"configuration/multi-datasources",title:"Multiple DataSources",description:"In Jimmer, each data source corresponds to a sqlClient object (whose type is JSqlClient or KSqlClient).",source:"@site/docs/configuration/multi-datasources.mdx",sourceDirName:"configuration",slug:"/configuration/multi-datasources",permalink:"/jimmer-doc/docs/configuration/multi-datasources",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/configuration/multi-datasources.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Multiple DataSources"},sidebar:"tutorialSidebar",previous:{title:"Connection Manager",permalink:"/jimmer-doc/docs/configuration/connection-manager"},next:{title:"Batch Control",permalink:"/jimmer-doc/docs/configuration/batch-size"}},u={},p=[{value:"Distributed Transaction Mode",id:"distributed-transaction-mode",level:2},{value:"Local Transaction Mode",id:"local-transaction-mode",level:2}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In Jimmer, each data source corresponds to a ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," object ",(0,r.kt)("em",{parentName:"p"},"(whose type is ",(0,r.kt)("inlineCode",{parentName:"em"},"JSqlClient")," or ",(0,r.kt)("inlineCode",{parentName:"em"},"KSqlClient"),")"),". "),(0,r.kt)("p",null,"For the most classic single data source case, one ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," object is sufficient. Even the Jimmer Spring Boot Starter can automatically create a single ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," object."),(0,r.kt)("p",null,"For multiple data sources, developers need to manually create multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," objects."),(0,r.kt)("p",null,"For the Jimmer Spring Boot Starter, the support for multiple data sources falls into two cases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Distributed Transaction Mode"),(0,r.kt)("li",{parentName:"ul"},"Local Transaction Mode")),(0,r.kt)("h2",{id:"distributed-transaction-mode"},"Distributed Transaction Mode"),(0,r.kt)("p",null,"Here, distributed transactions refer to using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html/boot-features-jta.html"},"Spring's support for JTA transactions"),"."),(0,r.kt)("p",null,"In this mode, simply create multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," objects."),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import org.springframework.beans.factory.annotation.Qualifier;\nimport org.babyfish.jimmer.spring.SpringClients;\n\n@configuration\npublic class SqlClientConfig {\n\n    @Bean\n    public JSqlClient sqlClient1(\n        ApplicationContext ctx,\n        @Qualifier("ds1") DataSource dataSource\n    ) {\n        return SqlClients.java(ctx, dataSoruce, null);\n    }\n\n    @Bean\n    public JSqlClient sqlClient2(\n        ApplicationContext ctx,\n        @Qualifier("ds2") DataSource dataSource\n    ) {\n        return SqlClients.java(ctx, dataSoruce, null);\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import org.springframework.beans.factory.annotation.Qualifier\nimport org.babyfish.jimmer.spring.SpringClients\n\n@configuration\nclass SqlClientConfig {\n\n    @Bean\n    public fun sqlClient1(\n        ctx: ApplicationContext,\n        @Qualifier("ds1") dataSource: DataSource\n    ): KSqlClient =\n        SqlClients.kotlin(ctx, dataSoruce)\n\n    @Bean\n    public fun sqlClient2(\n        ctx: ApplicationContext,\n        @Qualifier("ds2") dataSource: DataSource\n    ): KSqlClient =\n        SqlClients.kotlin(ctx, dataSoruce)\n}\n')))),(0,r.kt)("p",null,"Then, developers can freely use any of the ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," objects. Even if two data sources are operated within a transaction, the JTA transaction will ensure consistency between them."),(0,r.kt)("h2",{id:"local-transaction-mode"},"Local Transaction Mode"),(0,r.kt)("p",null,"Local transactions are slightly different, let's first look at the code:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.transaction.support.PlatformTransactionManager;\nimport org.babyfish.jimmer.spring.SpringClients;\n// highlight-next-line\nimport org.babyfish.jimmer.spring.transaction.JimmerTransactionManager;\n// highlight-next-line\nimport org.babyfish.jimmer.spring.transaction.TransactionalSqlClients;\n\n@configuration\npublic class SqlClientConfig {\n\n    @Bean\n    public PlatformTransactionManager tm1( \u2776\n        ApplicationContext ctx,\n        @Qualifier("ds1") DataSource dataSource\n    ) {\n        return new JimmerTransactionManager(\n            SqlClients.java(ctx, dataSoruce, null)\n        );\n    }\n\n    @Bean\n    public PlatformTransactionManager tm2(  \u2777\n        ApplicationContext ctx,\n        @Qualifier("ds2") DataSource dataSource\n    ) {\n        return new JimmerTransactionManager(\n            SqlClients.java(ctx, dataSoruce, null)\n        );\n    }\n\n    @Bean\n    public JSqlClient sqlClient() {  \u2778\n        TransactionalSqlClients.java();\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import org.springframework.beans.factory.annotation.Qualifier\nimport org.springframework.transaction.support.PlatformTransactionManager\nimport org.babyfish.jimmer.spring.SpringClients\n// highlight-next-line\nimport org.babyfish.jimmer.spring.transaction.JimmerTransactionManager\n// highlight-next-line\nimport org.babyfish.jimmer.spring.transaction.TransactionalSqlClients\n\n@configuration\npublic class SqlClientConfig {\n\n    @Bean\n    fun tm1(\n        ctx: ApplicationContext,\n        @Qualifier("ds1") dataSource: DataSource\n    ): PlatformTransactionManager = \u2776\n        JimmerTransactionManager(\n            SqlClients.kotlin(ctx, dataSoruce, null)\n        )\n\n    @Bean\n    fun tm2(  \n        ctx: ApplicationContext,\n        @Qualifier("ds2") dataSource: DataSource\n    ): PlatformTransactionManager = \u2777\n        JimmerTransactionManager(\n            SqlClients.kotlin(ctx, dataSoruce, null)\n        )\n\n    @Bean\n    public JSqlClient sqlClient() = \u2778\n        TransactionalSqlClients.kotlin()\n}\n')))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2776 Create the first transaction manager based on the first ",(0,r.kt)("inlineCode",{parentName:"p"},"DataSource"),", note that:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The transaction manager type is ",(0,r.kt)("inlineCode",{parentName:"li"},"org.babyfish.jimmer.spring.transaction.JimmerTransactionManager"),"."),(0,r.kt)("li",{parentName:"ul"},"Although the internal code creates a ",(0,r.kt)("inlineCode",{parentName:"li"},"sqlClient")," object, it is not exposed to the Spring context, but is held and hidden by the transaction manager."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2777 Create the second transaction manager based on the second ",(0,r.kt)("inlineCode",{parentName:"p"},"DataSource"),", same as \u2776, no need to repeat.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2778 Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," proxy and expose it to the Spring context for developers to inject and use."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For any business method that needs to operate Jimmer, the annotation ",(0,r.kt)("inlineCode",{parentName:"p"},'@Transactional("tm1")')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'@Transactional("tm2")')," must be used, so that Jimmer can be told which ",(0,r.kt)("inlineCode",{parentName:"p"},"JimmerTransactionManager")," the current business method is using. Otherwise, using the \u2778 ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," proxy will result in the following exception:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'The transactional sql client is used, \nhowever, there is no AOP transaction, or the transaction manager is not \n"org.babyfish.jimmer.spring.transaction.JimmerTransactionManager"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Once Jimmer understands that the current thread is using one of the transaction managers from \u2776 and \u2777, the \u2778 ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," proxy will use the internal ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," of the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"JimmerTransactionManager")," from \u2776 or \u2777 to provide services for the user."))))),(0,r.kt)("p",null,"That is, in the local transaction mode, although multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient")," objects can be created, the business method must explicitly specify which data source to use through the Spring annotation ",(0,r.kt)("inlineCode",{parentName:"p"},"@Transactional(transactionManagerRef)"),"."))}d.isMDXComponent=!0}}]);