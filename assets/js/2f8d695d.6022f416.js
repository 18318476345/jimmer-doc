"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[1522],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>p});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=m(a),p=r,h=c["".concat(s,".").concat(p)]||c[p]||u[p]||o;return a?n.createElement(h,l(l({ref:t},d),{},{components:a})):n.createElement(h,l({ref:t},d))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var m=2;m<o;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),r=a(34334);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>p});var n=a(83117),r=a(67294),o=a(34334),l=a(72389),i=a(67392),s=a(7094),m=a(12466);const d="tabList__CuJ",u="tabItem_LNqP";function c(e){var t;const{lazy:a,block:l,defaultValue:c,values:p,groupId:h,className:b}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=p??f.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),k=(0,i.l)(N,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===c?c:c??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==y&&!N.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${N.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:g}=(0,s.U)(),[T,w]=(0,r.useState)(y),j=[],{blockElementScrollPositionUntilNextRender:x}=(0,m.o5)();if(null!=h){const e=v[h];null!=e&&e!==T&&N.some((t=>t.value===e))&&w(e)}const C=e=>{const t=e.currentTarget,a=j.indexOf(t),n=N[a].value;n!==T&&(x(t),w(n),null!=h&&g(h,String(n)))},O=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=j.indexOf(e.currentTarget)+1;a=j[t]??j[0];break}case"ArrowLeft":{const t=j.indexOf(e.currentTarget)-1;a=j[t]??j[j.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},b)},N.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>j.push(e),onKeyDown:O,onFocus:C,onClick:C},l,{className:(0,o.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,r.cloneElement)(f.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function p(e){const t=(0,l.Z)();return r.createElement(c,(0,n.Z)({key:String(t)},e))}},35892:(e,t,a)=>{a.d(t,{ZP:()=>i});var n=a(83117),r=(a(67294),a(3905)),o=(a(65488),a(85162),a(79554));const l={toc:[]};function i(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'In order to solve the inconvenience of secondary "modification" ',(0,r.kt)("em",{parentName:"p"},"(creating a new immutable object based on another immutable object)")," of complex immutable objects in the current JVM ecosystem, some immutable object frameworks were born:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://immutables.github.io/immutable.html"},"Immutables")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/inferred/FreeBuilder"},"FreeBuilder")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://arrow-kt.io/learn/immutable-data/intro/"},"Arrow-Kt(Kotlin)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kopyk.at/"},"Kopyk(Kotlin)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/PatilShreyas/mutekt"},"MuteKt(Kotlin)"))),(0,r.kt)("p",null,"Jimmer is an ORM framework, and handling deep data structures is a core issue for ORM, so Jimmer must do similar work."),(0,r.kt)("p",null,"Jimmer needs to provide elegant dual language support for both Java and Kotlin at the same time. None of the above solutions can meet this requirement, so Jimmer did not use any of them, but chose to transplant ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/immerjs/immer"},"immer")," from the JavaScript/TypeScript field."),(0,r.kt)(o.ZP,{mdxType:"ImmutableStep"}),"This transplant is a powerful complement to the JVM ecosystem.",(0,r.kt)("p",null,"This framework is named Jimmer, paying tribute to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/immerjs/immer"},"immer"),"."))}i.isMDXComponent=!0},79554:(e,t,a)=>{a.d(t,{ZP:()=>s});var n=a(83117),r=(a(67294),a(3905)),o=a(65488),l=a(85162);const i={toc:[{value:"1. Define immutable type",id:"1-define-immutable-type",level:2},{value:"2. Create data structure from scratch",id:"2-create-data-structure-from-scratch",level:2},{value:"3. Create new data based on existing data",id:"3-create-new-data-based-on-existing-data",level:2}]};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Next, we will demonstrate the power of immutable objects transplanted from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/immerjs/immer"},"immer")," in three steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Define immutable types ")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create an immutable data structure from scratch")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Based on an existing data structure, create a new data structure according to some desired modifications. "),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"This last step is where the core value of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/immerjs/immer"},"immer")," lies. Please pay close attention.")))),(0,r.kt)("h2",{id:"1-define-immutable-type"},"1. Define immutable type"),(0,r.kt)("p",null,"To demonstrate this feature, there is no need for the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Entity")," annotation on ORM entities, the non-ORM ",(0,r.kt)("inlineCode",{parentName:"p"},"@Immutable")," is sufficient."),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TreeNode.java"',title:'"TreeNode.java"'},"package yourpackage;\n\nimport java.util.List;\nimport org.babyfish.jimmer.Immutable;\n\n@Immutable \npublic interface TreeNode {\n    \n    String name();\n\n    List<TreeNode> childNodes();\n}\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TreeNode.kt"',title:'"TreeNode.kt"'},"package yourpackage\n\nimport org.babyfish.jimmer.Immutable\n\n@Immutable\ninterface TreeNode {\n\n    val name: String\n\n    val childNodes: List<TreeNode>\n}\n")))),(0,r.kt)("h2",{id:"2-create-data-structure-from-scratch"},"2. Create data structure from scratch"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode treeNode = Immutables.createTreeNode(root -> {\n    root.setName("Root").addIntoChildNodes(food -> {\n        food\n            .setName("Food")\n            .addIntoChildNodes(drink -> {\n                drink\n                    .setName("Drink")\n                    .addIntoChildNodes(cocacola -> {\n                        cocacola.setName("Cocacola");\n                    })\n                    .addIntoChildNodes(fanta -> {\n                        fanta.setName("Fanta");\n                    });\n                ;\n            });\n        ;\n    });\n});\n'))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val treeNode = TreeNode {\n    name = "Root"\n    childNodes().addBy {\n        name = "Food"\n        childNodes().addBy {\n            name = "Drinks"\n            childNodes().addBy {\n                name = "Cocacola"\n            }\n            childNodes().addBy {\n                name = "Fanta"\n            }\n        }\n    }\n}\n')))),(0,r.kt)("h2",{id:"3-create-new-data-based-on-existing-data"},"3. Create new data based on existing data"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode newTreeNode = Immutables.createTreeNode(\n        // highlight-next-line\n        treeNode, // existing data\n        root -> {\n            root\n                .childNodes(false).get(0) // Food\n                .childNodes(false).get(0) // Drink\n                .childNodes(false).get(0) // Cocacola\n                .setName("Cocacola plus");\n        }\n);\n\n// Show that `newTreeNode` reflects the developer\'s desired modifications\n// Note that this does not affect the existing `treeNode` at all\n\nSystem.out.println("treeNode:" + treeNode);\nSystem.out.println("newTreeNode:" + newTreeNode);\n'))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'/*\n * val newTreeNode = treeNode.copy {\n *     ...\n * }\n *\n * is actually shorthand for \n * \n * val newTreeNode = TreeNode(treeNode) {\n *     ...\n * }\n */\nval newTreeNode = treeNode.copy {\n    childNodes()[0] // Food\n        .childNodes()[0] // Drinks\n        .childNodes()[0] // Cocacola\n        .name += " plus"\n}\n\n// Show that `newTreeNode` reflects the developer\'s desired modifications\n// Note that this does not affect the existing `treeNode` at all\n\nprintln("treeNode: $treeNode")\nprintln("newTreeNode: $newTreeNode")\n')))),(0,r.kt)("p",null,"Output (the actual printed output is compact, but is formatted here for readability)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'treeNode: {\n    "name":"Root",\n    "childNodes":[\n        {\n            "name":"Food",\n            "childNodes":[\n                {\n                    "name":"Drink",\n                    "childNodes":[\n                        // highlight-next-line\n                        {"name":"Coco Cola"},\n                        {"name":"Fanta"}\n                    ]\n                }\n            ]\n        }\n    ]\n}\nnewTreeNode: {\n    "name":"Root",\n    "childNodes":[\n        {\n            "name":"Food",\n            "childNodes":[\n                {\n                    "name":"Drink",\n                    "childNodes":[\n                        // highlight-next-line\n                        {"name":"Coco Cola plus"},\n                        {"name":"Fanta"}\n                    ]\n                }\n            ]\n        }\n    ]\n}\n')),(0,r.kt)("p",null,"As you can see, ",(0,r.kt)("inlineCode",{parentName:"p"},"treeNode")," is unaffected, and ",(0,r.kt)("inlineCode",{parentName:"p"},"newTreeNode")," reflects the user's desired modifications."))}s.isMDXComponent=!0},59508:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var n=a(83117),r=(a(67294),a(3905)),o=a(35892);const l={sidebar_position:3,title:"Solution"},i=void 0,s={unversionedId:"object/immutable/solution",id:"object/immutable/solution",title:"Solution",description:"The sample code above uses a type called TreeNodeDraft, which is the interface type automatically generated by Jimmer based on the user-defined type TreeNode.",source:"@site/docs/object/immutable/solution.mdx",sourceDirName:"object/immutable",slug:"/object/immutable/solution",permalink:"/jimmer-doc/docs/object/immutable/solution",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/object/immutable/solution.mdx",tags:[],version:"current",lastUpdatedAt:1704015848,formattedLastUpdatedAt:"Dec 31, 2023",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Solution"},sidebar:"tutorialSidebar",previous:{title:"Current Situation",permalink:"/jimmer-doc/docs/object/immutable/current-situation"},next:{title:"Draft",permalink:"/jimmer-doc/docs/object/draft"}},m={},d=[],u={toc:d};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.ZP,{mdxType:"ImmutableSolution"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The sample code above uses a type called ",(0,r.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft"),", which is the interface type automatically generated by Jimmer based on the user-defined type ",(0,r.kt)("inlineCode",{parentName:"p"},"TreeNode"),"."),(0,r.kt)("p",{parentName:"admonition"},"Readers can ignore this auto-generated interface for now, later documentation ",(0,r.kt)("a",{parentName:"p",href:"../draft"},"Draft")," will introduce it. ")))}c.isMDXComponent=!0}}]);